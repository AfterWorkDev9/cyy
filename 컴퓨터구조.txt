컴퓨터 구조

컴퓨터 : 명령어를 처리하는 기계

CPU: 명령어 읽고, 해석, 실행 (ALR(산술논리연산장치) , 레지스터, 제어장치)
 - ALU : 계산기
 - 레지스터 : CPU 내부 작은 저장장치
 - 제어장치 : 제어 신호 내보내고 명령어를 해석하는 장치(메모리 읽기 신호, 메모리 쓰기 신호)
 
 
 
메인 메모리 = 주기억 장치 = RAM, ROM (주기억 장치를 지칭하는 하드웨어)
보통 메모리라고 하면 RAM 을 지칭하는 경우가 많음
전원을 끄면 저장된 내용 사라짐
현재 실행되는 프로그램 -> 프로세스
프로그램이 실행되기 위해서는 메모리에 저장되어 있어야 함
메모리는 현재 실행되고 있는 프로그램(명령어, 데이터)을 저장함
메모리는 주소를 가지고 있음 - 주소에 명령어, 데이터를 저장




보조기억장치
대용량(백업용) 으로 저장할 수 있는 장치



입출력 장치
다른 장치로 정보를 주고 받는 장치
보조기억장치랑 딱 잘라 구분되는 개념은 아님


메인보드(마더보드)
이 4가지 부품이 서로 정보를 주고받을 수 있는 연결 판
연결된 부품은 버스를 통해 정보를 주고 받음
버스는 정보를 주고 받는 일종의 통로임

시스템 버스(주소버스, 데이터 버스, 제어버스)


word
CPU 가 한 번에 처리할 수 있는 정보의 크기 단위


2의보수랑 이진값이랑 똑같은데 -> cpu 내부 플래그 레지스터에서 음수, 양수 flag를 가지고 있음

cf) 2의보수는 이진수에서 전부 반전시키고 1을 더한 값임
2의 보수를 검증은 2번 2의 보수 구하면 됨
0101 (5) -> 1011 (2의 보수)
1011 (한 번 더 2의 보수)-> 0101 (5)



아스키 코드
7비트로 하나의 문자 표현 (1비트는 오류 검출을 위해 사용됨 패리티 비트)
2의 7승개를 아스키 문자 만들 수 있음


EUC-KR
완성형 인코딩
글자 하나에 2바이트 (16비트, 4자리 16진수)
2300여개 한글 표현 가능하나 제한적임


 
유니코드 
통일된 문자 집합
한글, 영어, 화살표, 이모티콘 다 가능하나
유니코드 인코딩 방식도 여러 개임 utf-8, utf-16...


utf-8
가변길이 인코딩 (인코딩 결과가 1~4바이트)



컴파일 언어
고급언어(소스코드) -> 컴파일(컴파일러) -> 저급언어(목적 코드)


명령어 = 연산 코드 + 오퍼랜드(주소필드, 연산에 사용될 저장 위치)


플래그 -> 플래그 레지스터에 저장
부호 플래그
제로 플래그(연산 결과가 0인지)
캐리 플래그(올림수나 빌림수)
오버플로우 플래그
인터럽트 플래그
슈퍼바이저 플래그(커널 모드인지 사용자 모드인지)


레지스터 : CPU 내부에 있는 작은 임시 저장 장치
CPU = ALU + 다양한 레지스터들 + 제어장치
프로그램 카운터: 메모리에서 가져올 명령어 주소
메모리 주소 레지스터: 메모리 주소 저장
메모리 버퍼 레지스터: 메모리 주소의 값
명령어 레지스터: CPU에게 해석할 명령어 값

명령어 사이클과 인터럽트
인터럽트가 있으면 I/O 작업 동안 CPU 는 다른 일을 할 수가 있음
인터럽트 처리 순서
1. IO장치 -> CPU 에 인터럽트 요청 신호 보냄
2. CPU 는 실행사이클이 끝나고 명령어 인출 전에 항상 인터럽트 여부 확인
3. CPU 인터럽트 요청을 확인하고 인터럽트 플래그를 통해 혀내 인터럽트 처리 가능한지 확인
4. 인터럽트를 받아들일 수 있다면 CPU 는 지금까지의 작업을 백업 처리함
5. CPU 는 인터럽트 벡터를 참고하여 인터럽트 서비스 루틴을 실행
6. 인터럽트 서비스 루틴 실행이 끝나면 백업해둔 작업을 복구해서 실행 재개
* 인터럽트 벡터 : 각각의 인터럽트를 구분하기 위한 정보


컴퓨터 부품들은 '클럭 신호'에 맞춰 움직인다
cpu 는 '명령어 사이클'이라는 정해진 흐름에 맞춰 실행한다

빠른 CPU 설계방법
코어수 늘리기 
스레드 수 늘리기

코어 : CPU 내에서 명령어를 실행하는 부품, 여러 개 있을 수 있음
멀티코어 프로세서 : 여러 개의 코어를 포함하고 있는 CPU
EX) 싱글코어, 듀얼코어,,,,

스레드 -> 하드웨어적 스레드, 소프트웨어적 스레드
하드웨어 스레드 : 하나의 코어가 동시에 처리하는 명령어 단위
